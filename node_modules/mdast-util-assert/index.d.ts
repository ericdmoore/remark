/**
 * Assert that `node` is a valid mdast node.
 * If `node` is a parent, all children will be asserted too.
 *
 * @param {unknown} [node]
 * @param {Parent} [parent]
 * @returns {asserts node is Node}
 */
export function assert(node?: unknown, parent?: Parent): asserts node is Node
/**
 * Assert that `node` is a valid mdast parent.
 *
 * @param {unknown} [node]
 * @param {Parent} [parent]
 * @returns {asserts node is Parent}
 */
export function parent(
  node?: unknown,
  parent?: Parent
): asserts node is import('mdast').Parent
/**
 * Assert that `node` is a valid mdast literal.
 *
 * @param {unknown} [node]
 * @param {Parent} [parent]
 * @returns {asserts node is Literal}
 */
export function literal(
  node?: unknown,
  parent?: Parent
): asserts node is import('mdast').Literal
export type Node = Parent['children'][number] | Root
export type Parent = import('mdast').Parent
export type Literal = import('mdast').Literal
export type Root = import('mdast').Root
export type List = import('mdast').List
export type ListItem = import('mdast').ListItem
export type Heading = import('mdast').Heading
export type Code = import('mdast').Code
export type FootnoteDefinition = import('mdast').FootnoteDefinition
export type Definition = import('mdast').Definition
export type Link = import('mdast').Link
export type Image = import('mdast').Image
export type LinkReference = import('mdast').LinkReference
export type ImageReference = import('mdast').ImageReference
export type FootnoteReference = import('mdast').FootnoteReference
export type Table = import('mdast').Table
import {_void} from 'unist-util-assert'
import {wrap} from 'unist-util-assert'
export {_void, wrap}
