/**
 * Assert that `node` is a valid unist node.
 * If `node` is a parent, all children will be asserted too.
 *
 * @param {unknown} [node]
 * @param {Parent} [parent]
 * @returns {asserts node is Node}
 */
export function assert(
  node?: unknown,
  parent?: Parent
): asserts node is import('unist').Node
/**
 * Assert that `node` is a valid unist parent.
 * All children will be asserted too.
 *
 * @param {unknown} [node]
 * @param {Parent} [parent]
 * @returns {asserts node is Parent}
 */
export function parent(
  node?: unknown,
  parent?: Parent
): asserts node is import('unist').Parent
/**
 * Assert that `node` is a valid unist literal.
 *
 * @param {unknown} [node]
 * @param {Parent} [parent]
 * @returns {asserts node is Literal}
 */
export function literal(
  node?: unknown,
  parent?: Parent
): asserts node is import('unist').Literal
/**
 * Assert that `node` is a valid unist node, but neither parent nor literal.
 *
 * @param {unknown} [node]
 * @param {Parent} [parent]
 * @returns {asserts node is _Void}
 */
export function _void(node?: unknown, parent?: Parent): asserts node is _Void
/**
 * Wrapper that adds the current node (and parent, if available) to error
 * messages.
 *
 * @param {(node?: unknown, parent?: Parent|null) => asserts node is Node} fn
 * @returns {(node?: unknown, parent?: Parent|null) => asserts node is Node}
 */
export function wrap(
  fn: (
    node?: unknown,
    parent?: Parent | null
  ) => asserts node is import('unist').Node
): (
  node?: unknown,
  parent?: Parent | null
) => asserts node is import('unist').Node
export type AssertionError = import('assert').AssertionError
export type Node = import('unist').Node
export type Parent = import('unist').Parent
export type Literal = import('unist').Literal
export type Position = import('unist').Position
export type Point = import('unist').Point
export type _Void = Node & {
  children: never
  value: never
}
